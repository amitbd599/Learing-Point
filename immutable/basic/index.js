// let immutable = require("immutable");

// let map1 = immutable.Map({ a: 1, b: 2, c: 3 });

// map1.b = 20;

// console.log(map1.toObject());

import { List } from "immutable";

// ‡¶è‡¶ï‡¶ü‡¶ø Immutable List ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
const numbers = List([1, 2, 3]);

// ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
const newNumbers = numbers.push(4);

console.log(numbers); // Output: List [1, 2, 3]
console.log(newNumbers); // Output: List [1, 2, 3, 4]

/*

        üéØ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£

        Immutable.js ‡¶°‡ßá‡¶ü‡¶æ ‡¶ü‡¶æ‡¶á‡¶™	‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®	‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø
        List	Immutable ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá	Indexed collection, .push(), .pop()
        Map	Immutable ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü	Key-value pair, .set(), .get()
        Set	‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶∞ ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶®	No duplicates, .add(), .delete()
        Stack	LIFO ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞	.push(), .pop()
        OrderedMap	‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶° ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü	Map-‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡¶∂‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶á‡¶®‡¶ü‡ßá‡¶á‡¶® ‡¶ï‡¶∞‡ßá
        Record	‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞	.set(), .get(), ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ





*/
